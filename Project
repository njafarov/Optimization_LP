!pip install pyomo
!apt-get install -y -qq glpk-utils

import pyomo.environ as pyo
from pyomo.opt import SolverFactory

# Define the model
model = pyo.ConcreteModel()

# Define sets
model.i = pyo.RangeSet(1,3)
model.j = pyo.RangeSet(1,4)

# Define parameters
model.S = pyo.Param(model.i, initialize={1:35,2:50,3:40})
S = model.S # Supply 
model.D = pyo.Param(model.j, initialize={1:45,2:20,3:30,4:30})
D = model.D # Demand
model.P = pyo.Param(model.i, model.j, initialize={(1,1):8,(1,2):6,(1,3):10,(1,4):9,
                                                  (2,1):9,(2,2):12,(2,3):13,(2,4):7,
                                                  (3,1):14,(3,2):9,(3,3):16,(3,4):5})
P = model.P # Price

# Decision Variable
model.x = pyo.Var(model.i, model.j, within=pyo.NonNegativeReals)
x = model.x 

# Objective Function
def objective_function(model):
  return sum(sum(x[i,j]*P[i,j] for i in model.i) for j in model.j)
model.Obj = pyo.Objective(rule=objective_function, sense=pyo.minimize)

# Constrains
def cons1(model,i):
  return sum(x[1,j] for j in model.j)<=S[1]
model.Cons1 = pyo.Constraint(model.j,rule=cons1)

def cons2(model,i):
  return sum(x[2,j] for j in model.j)<=S[2]
model.Cons2 = pyo.Constraint(model.j, rule=cons2)

def cons3(model,i):
  return sum(x[3,j] for j in model.j)<=S[3]
model.Cons3 = pyo.Constraint(model.j, rule=cons3)


def cons4(model,j):
  return sum(x[i,1] for i in model.i)>=D[1]
model.Cons4 = pyo.Constraint(model.i,rule=cons4)

def cons5(model,j):
  return sum(x[i,2] for i in model.i)>=D[2]
model.Cons5 = pyo.Constraint(model.i,rule=cons5)

def cons6(model,j):
  return sum(x[i,3] for i in model.i)>=D[3]
model.Cons6 = pyo.Constraint(model.i,rule=cons6)

def cons7(model,j):
  return sum(x[i,4] for i in model.i)>=D[4]
model.Cons7 = pyo.Constraint(model.i,rule=cons7)

# Optimization
Solver = SolverFactory('glpk')
results = Solver.solve(model)

print(results)
print("Objective function: ", model.Obj())
for i in model.i:
  for j in model.j:
    print("Electricity sent from Plant", i, "to City", j, "= ", x[i,j]())
